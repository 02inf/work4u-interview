/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteRouteImport } from './routes/login/route'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteRouteImport } from './routes/index/route'
import { Route as MeetingNewRouteRouteImport } from './routes/meeting/new/route'
import { Route as MeetingMeetingIdRouteRouteImport } from './routes/meeting/$meetingId/route'
import { Route as DigestPublicIdRouteRouteImport } from './routes/digest/$publicId/route'

const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRouteRoute = IndexRouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MeetingNewRouteRoute = MeetingNewRouteRouteImport.update({
  id: '/meeting/new',
  path: '/meeting/new',
  getParentRoute: () => rootRouteImport,
} as any)
const MeetingMeetingIdRouteRoute = MeetingMeetingIdRouteRouteImport.update({
  id: '/meeting/$meetingId',
  path: '/meeting/$meetingId',
  getParentRoute: () => rootRouteImport,
} as any)
const DigestPublicIdRouteRoute = DigestPublicIdRouteRouteImport.update({
  id: '/digest/$publicId',
  path: '/digest/$publicId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/dashboard': typeof DashboardRouteRoute
  '/login': typeof LoginRouteRoute
  '/digest/$publicId': typeof DigestPublicIdRouteRoute
  '/meeting/$meetingId': typeof MeetingMeetingIdRouteRoute
  '/meeting/new': typeof MeetingNewRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/dashboard': typeof DashboardRouteRoute
  '/login': typeof LoginRouteRoute
  '/digest/$publicId': typeof DigestPublicIdRouteRoute
  '/meeting/$meetingId': typeof MeetingMeetingIdRouteRoute
  '/meeting/new': typeof MeetingNewRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRouteRoute
  '/dashboard': typeof DashboardRouteRoute
  '/login': typeof LoginRouteRoute
  '/digest/$publicId': typeof DigestPublicIdRouteRoute
  '/meeting/$meetingId': typeof MeetingMeetingIdRouteRoute
  '/meeting/new': typeof MeetingNewRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/digest/$publicId'
    | '/meeting/$meetingId'
    | '/meeting/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/digest/$publicId'
    | '/meeting/$meetingId'
    | '/meeting/new'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/digest/$publicId'
    | '/meeting/$meetingId'
    | '/meeting/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  DashboardRouteRoute: typeof DashboardRouteRoute
  LoginRouteRoute: typeof LoginRouteRoute
  DigestPublicIdRouteRoute: typeof DigestPublicIdRouteRoute
  MeetingMeetingIdRouteRoute: typeof MeetingMeetingIdRouteRoute
  MeetingNewRouteRoute: typeof MeetingNewRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/meeting/new': {
      id: '/meeting/new'
      path: '/meeting/new'
      fullPath: '/meeting/new'
      preLoaderRoute: typeof MeetingNewRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/meeting/$meetingId': {
      id: '/meeting/$meetingId'
      path: '/meeting/$meetingId'
      fullPath: '/meeting/$meetingId'
      preLoaderRoute: typeof MeetingMeetingIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/digest/$publicId': {
      id: '/digest/$publicId'
      path: '/digest/$publicId'
      fullPath: '/digest/$publicId'
      preLoaderRoute: typeof DigestPublicIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  DashboardRouteRoute: DashboardRouteRoute,
  LoginRouteRoute: LoginRouteRoute,
  DigestPublicIdRouteRoute: DigestPublicIdRouteRoute,
  MeetingMeetingIdRouteRoute: MeetingMeetingIdRouteRoute,
  MeetingNewRouteRoute: MeetingNewRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
