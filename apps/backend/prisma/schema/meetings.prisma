// Meeting management models

model Workspace {
  id          String   @id @default(uuid()) @map("id")
  name        String   @map("name")
  description String?  @map("description")
  ownerId     String   @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  owner    User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members  WorkspaceMember[]
  meetings Meeting[]
  tags     Tag[]

  @@map("workspaces")
}

model WorkspaceMember {
  id          String        @id @default(uuid()) @map("id")
  workspaceId String        @map("workspace_id")
  userId      String        @map("user_id")
  role        WorkspaceRole @default(MEMBER) @map("role")
  joinedAt    DateTime      @default(now()) @map("joined_at")

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
  @@map("workspace_members")
}

model Meeting {
  id          String        @id @default(uuid()) @map("id")
  title       String        @map("title")
  description String?       @map("description")
  scheduledAt DateTime?     @map("scheduled_at")
  duration    Int?          @map("duration") // in minutes
  status      MeetingStatus @default(CREATED) @map("status")
  userId      String        @map("user_id")
  workspaceId String?       @map("workspace_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace?           @relation(fields: [workspaceId], references: [id], onDelete: SetNull)
  participants MeetingParticipant[]
  files        MeetingFile[]
  transcript   MeetingTranscript?
  summary      Summary?
  actionItems  ActionItem[]
  topics       Topic[]
  comments     Comment[]
  tags         MeetingTag[]

  @@map("meetings")
}

model MeetingParticipant {
  id        String          @id @default(uuid()) @map("id")
  meetingId String          @map("meeting_id")
  userId    String          @map("user_id")
  role      ParticipantRole @default(PARTICIPANT) @map("role")
  joinedAt  DateTime?       @map("joined_at")
  leftAt    DateTime?       @map("left_at")

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([meetingId, userId])
  @@map("meeting_participants")
}

model MeetingFile {
  id         String   @id @default(uuid()) @map("id")
  meetingId  String   @map("meeting_id")
  fileName   String   @map("file_name")
  filePath   String   @map("file_path")
  fileType   String   @map("file_type")
  fileSize   BigInt   @map("file_size")
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("meeting_files")
}

// AI processing results models

model MeetingTranscript {
  id              String   @id @default(uuid()) @map("id")
  meetingId       String   @unique @map("meeting_id")
  content         String   @map("content")
  speakerLabels   Json?    @map("speaker_labels")
  confidenceScore Float?   @map("confidence_score")
  processingTime  Int?     @map("processing_time") // in seconds
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("meeting_transcripts")
}

model Summary {
  id               String   @id @default(uuid()) @map("id")
  meetingId        String   @unique @map("meeting_id")
  publicId         String   @unique @default(uuid()) @map("public_id") // for shareable links
  executiveSummary String   @map("executive_summary")
  keyPoints        Json     @map("key_points") // array of strings
  decisions        Json?    @map("decisions") // array of decision objects
  nextSteps        Json?    @map("next_steps") // array of strings
  processingTime   Int?     @map("processing_time") // in seconds
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("summaries")
}

model ActionItem {
  id          String         @id @default(uuid()) @map("id")
  meetingId   String         @map("meeting_id")
  description String         @map("description")
  assigneeId  String?        @map("assignee_id")
  dueDate     DateTime?      @map("due_date")
  priority    ActionPriority @default(MEDIUM) @map("priority")
  status      ActionStatus   @default(PENDING) @map("status")
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  // Relations
  meeting  Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  assignee User?   @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  @@map("action_items")
}

model Topic {
  id              String @id @default(uuid()) @map("id")
  meetingId       String @map("meeting_id")
  topic           String @map("topic")
  sentimentScore  Float? @map("sentiment_score") // -1 to 1
  importanceScore Float? @map("importance_score") // 0 to 1
  startTime       Int?   @map("start_time") // in seconds from meeting start
  endTime         Int?   @map("end_time") // in seconds from meeting start

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@map("topics")
}

// Collaboration models

model Comment {
  id        String   @id @default(uuid()) @map("id")
  meetingId String   @map("meeting_id")
  userId    String   @map("user_id")
  content   String   @map("content")
  threadId  String?  @map("thread_id") // for nested comments
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  meeting Meeting   @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentThread", fields: [threadId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentThread")

  @@map("comments")
}

model Tag {
  id          String   @id @default(uuid()) @map("id")
  name        String   @map("name")
  color       String   @default("#3B82F6") @map("color")
  workspaceId String   @map("workspace_id")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  workspace Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  meetings  MeetingTag[]

  @@unique([name, workspaceId])
  @@map("tags")
}

model MeetingTag {
  id        String @id @default(uuid()) @map("id")
  meetingId String @map("meeting_id")
  tagId     String @map("tag_id")

  // Relations
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([meetingId, tagId])
  @@map("meeting_tags")
}

// Enums

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum MeetingStatus {
  CREATED
  PROCESSING
  COMPLETED
  FAILED
  ARCHIVED
}

enum ParticipantRole {
  HOST
  CO_HOST
  PARTICIPANT
}

enum ActionPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
